package ${packageName}.model;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;

import android.os.Parcel;
import android.os.Parcelable;
import com.google.gson.annotations.SerializedName;

import ${packageName}.database.table.${tableName}Table;
#if( $participatingExternalRelationships )
#foreach( $relationship in $participatingExternalRelationships )
#set( $foreignClassName = $relationship.getRightTableClassName() )
#if( $foreignClassName )
import ${packageName}.database.table.${foreignClassName}Table;
#end
#end
#end
import ${packageName}.provider.${providerName}Provider;

#if( $table.isUsesDateTime() )
import java.text.ParseException;
import java.text.SimpleDateFormat;
import android.util.Log;
import java.util.Date;
#end
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

public class ${tableName} implements Serializable, Parcelable {

    public final String LOGTAG = "${tableName}";
#if( $table.isUsesDateTime() )

    private final SimpleDateFormat dateTimeFormat = new SimpleDateFormat("${providerModel.getDateTimeFormat()}");
#end

    private static final long serialVersionUID = ${serialVersionUID}L;

#foreach( $field in $fields )
#if($field)
#set( $default = "" )
#if($field.hasDefaultSet())
#set( $default = " = " + $field.getFieldDefault() )
#end
#if($field.isPrimaryKey())
    // Primary Key
#end
    @SerializedName("$field.getFieldSerialized()")
    private ${field.getJavaTypeString()} ${field.getPrivateVariableName()}${default};

#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKey = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#set( $foreignKeyType = $relationship.getLeftTableFieldType() )
#if( $foreignKey )

    // Foreign Key
    @SerializedName("$relationship.getForeignKeyNameForTable($table).toLowerCase()")
    private ${foreignKeyType} ${foreignKey};

#end
#end
#end
    private ContentValues mValues = new ContentValues();

    public ${tableName}() {}

    public ${tableName}(final Cursor cursor) {
        this(cursor, false);
    }

    public ${tableName}(final ContentValues values) {
#foreach ($field in $fields)
#if($field && !$field.isCustom())
         ${field.getPrivateVariableName()} = values.getAs${field.getJavaTypeLongString()}(${tableName}Table.${field.getConstantString()});
#end
#end
        //TODO relationship values
    }

    public ${tableName}(final Parcel in) {
#foreach ($field in $fields)
#if($field && !$field.isCustom() && $field.getFieldType() != "boolean")
        ${field.getPrivateVariableName()} = in.${field.getJavaParcelReader()}();
#elseif ($field && $field.getFieldType() == "boolean")
        ${field.getPrivateVariableName()} = in.${field.getJavaParcelReader()}() == 1;
#end
#end
        //TODO relationship values
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
#foreach ($field in $fields)
#if($field && !$field.isCustom() && $field.getFieldType() != "boolean")
        dest.${field.getJavaParcelWriter()}(${field.getPrivateVariableName()});
#elseif ($field && $field.getFieldType() == "boolean")
        dest.${field.getJavaParcelWriter()}(${field.getPrivateVariableName()} ? 1 : 0);
#end
#end
        //TODO relationship values
    }

    // Sometimes you're going to need to extend your generated model
    // in which case this constructor will facilitate copying values
    // from a passed child class which extends this class.
    // Remember to implement a matching constructor in any child class
    // as needed with a call to `super(in)`.
    public <T extends ${tableName}> ${tableName}(final T in) {
#foreach ($field in $fields)
#if($field && !$field.isCustom())
        set${field.getNameAsTitleCase()}(in.get${field.getNameAsTitleCase()}());
#end
#end
#if( $participatingRelationships )

#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#if( $foreignKeyTitleCase )
        set${foreignKeyTitleCase}(in.get${foreignKeyTitleCase}());
#end
#end
#end
    }

    public ${tableName}(final Cursor cursor, final boolean prependTableName) {
        String prefix = prependTableName ? ${tableName}Table.TABLE_NAME + "_" : "";
#foreach ($field in $fields)
#if($field && !$field.isCustom() && $field.getFieldType() != "boolean")
        set${field.getNameAsTitleCase()}(cursor.${field.getJavaTypeStringGet()}(cursor.getColumnIndex(prefix + ${tableName}Table.${field.getConstantString()})));
#elseif($field && $field.getFieldType() == "boolean")
        set${field.getNameAsTitleCase()}(cursor.${field.getJavaTypeStringGet()}(cursor.getColumnIndex(prefix + ${tableName}Table.${field.getConstantString()})) > 0);
#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#set( $foreignKeyType = $relationship.getLeftTableFieldType() )

#if( $foreignKeyTitleCase && $foreignKeyConstant)
        set${foreignKeyTitleCase}(cursor.get${foreignKeyType}(cursor.getColumnIndex(prefix + ${tableName}Table.${foreignKeyConstant})));
#end
#end
#end
    }

    public ContentValues getContentValues() {
        if (mValues.size() == 0) {
#foreach ($field in $fields)
#if($field && !$field.isCustom())
            mValues.put(${tableName}Table.${field.getConstantString()}, ${field.getPrivateVariableName()});
#end
#end
            //TODO: Add support for relationship values
        }
        return mValues;
    }

#foreach ($field in $fields)
#if($field)
    public void set${field.getNameAsTitleCase()}(final ${field.getJavaTypeString()} ${field.getFieldName()}) {
        ${field.getPrivateVariableName()} = ${field.getFieldName()};
#if(!$field.isCustom())
        mValues.put(${tableName}Table.${field.getConstantString()}, ${field.getFieldName()});
#end
    }

    public ${field.getJavaTypeString()} get${field.getNameAsTitleCase()}() {
            return ${field.getPrivateVariableName()};
    }
#end
#end

#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyVariableName = $relationship.getForeignKeyVariableNameForTable($table) )
#set( $foreignKeyPrivateVariableName = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#set( $foreignKeyType = $relationship.getLeftTableFieldType() )
#if( $foreignKeyTitleCase )
    public ${tableName} set${foreignKeyTitleCase}(final ${foreignKeyType} ${foreignKeyVariableName}) {
        ${foreignKeyPrivateVariableName} = ${foreignKeyVariableName};
        mValues.put(${tableName}Table.${foreignKeyConstant}, ${foreignKeyVariableName});
        return this;
    }

    public ${foreignKeyType} get${foreignKeyTitleCase}() {
            return ${foreignKeyPrivateVariableName};
    }

#end
#end
#end
    @Override
    public String toString() {
        return "${primaryKey.getFieldName()}: " + get${primaryKey.getNameAsTitleCase()}()
#foreach ($field in $fields)
#if($field && !$field.isPrimaryKey())
                     + " - ${field.getFieldName()}: " + get${field.getNameAsTitleCase()}()
#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKey = $relationship.getForeignKeyNameForTable($table).toLowerCase() )
#if( $foreignKey )
                     + " - ${foreignKey}: " + get${foreignKeyTitleCase}()
#end
#end
#end
                     ;
    }

    public static ${tableName} get${tableName}By${primaryKey.getNameAsTitleCase()}(final Context context, final ${primaryKey.getJavaTypeString()} ${primaryKey.getFieldName()}) {
        final Cursor cursor = context.getContentResolver().query(${providerName}Provider.${tableConstantName}_CONTENT_URI, null, ${tableName}Table.WHERE_${primaryKey.getConstantString()}_EQUALS, new String[]{String.valueOf( ${primaryKey.getFieldName()} )}, null);
#set( $varName = $tableName.toLowerCase() )
        ${tableName} ${varName};
        if (cursor != null && cursor.moveToFirst()) {
            ${varName} = new ${tableName}(cursor);
        } else {
            ${varName} = new ${tableName}();
        }
        return ${varName};
    }

#if( $participatingExternalRelationships )
#foreach( $relationship in $participatingExternalRelationships )
#set( $foreignClassName = $relationship.getRightTableClassName() )
#set( $foreignClassConstant = $relationship.getRightTableConstantName() )
#set( $foreignKey = $relationship.getLeftTableForeignKey() )
#if( $foreignClassName )
    public List<${foreignClassName}> get${foreignClassName}s(final Context context) {
        final Cursor c = context.getContentResolver().query(${providerName}Provider.${foreignClassConstant}_CONTENT_URI, null, ${foreignClassName}Table.WHERE_${foreignKey}_EQUALS,new String[]{String.valueOf(get${relationship.getLeftTableFieldNameAsTitleCase()}())},null);
        return ${foreignClassName}.listFromCursor(c);
    }
#end
#end
#end

    public static List<${tableName}> listFromCursor(final Cursor cursor) {
        final List<${tableName}> list = new ArrayList<${tableName}>();

        if (cursor != null && cursor.moveToFirst()) {
            do {
                list.add(new ${tableName}(cursor));
            } while (cursor.moveToNext());
        }

        return list;
    }

#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyVariableName = $relationship.getForeignKeyVariableNameForTable($table) )
#set( $foreignKeyPrivateVariableName = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase )
    public static List<${tableName}> get${tableName}sBy${foreignKeyTitleCase}(final Context context, final Long ${foreignKeyVariableName}) {
        final Cursor cursor = context.getContentResolver().query(${providerName}Provider.${tableConstantName}_CONTENT_URI, null, ${tableName}Table.WHERE_${foreignKeyConstant}_EQUALS, new String[]{String.valueOf(${foreignKeyVariableName})}, null);
        return listFromCursor(cursor);
    }
#end
#end
#end

    public static ContentValues[] getContentValues(final List<${tableName}> items) {
        final ContentValues[] values = new ContentValues[items.size()];
        int i = 0;
        for(${tableName} item : items) {
            values[i++] = item.getContentValues();
        }
        return values;
    }

    public static int delete(final Context context, final ${tableName} item) {
        final ContentResolver contentResolver = context.getContentResolver();
        return contentResolver.delete(${providerName}Provider.${tableConstantName}_CONTENT_URI.buildUpon().appendPath(String.valueOf(item.get${primaryKey.getNameAsTitleCase()}())).build(), null, null);
    }

    public static Uri insert(final Context context, final ${tableName} item) {
        final ContentResolver contentResolver = context.getContentResolver();
        return contentResolver.insert(${providerName}Provider.${tableConstantName}_CONTENT_URI, item.getContentValues());
    }

    public static int bulkInsert(final Context context, final List<${tableName}> items) {
        final ContentResolver contentResolver = context.getContentResolver();

        ContentValues[] newValues = new ContentValues[items.size()];
        for (int i = 0; i < items.size(); i++) {
            newValues[i] = items.get(i).getContentValues();
        }
        int rowsAdded = contentResolver.bulkInsert(${providerName}Provider.${tableConstantName}_CONTENT_URI, newValues);

        return rowsAdded;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Parcelable.Creator<${tableName}> CREATOR = new Parcelable.Creator<${tableName}>() {
        public ${tableName} createFromParcel(Parcel in) {
            return new ${tableName}(in);
        }
        public ${tableName}[] newArray(int size) {
            return new ${tableName}[size];
        }
    };

// KEEP
${keep}
// ENDKEEP
}
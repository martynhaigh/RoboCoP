package ${packageName}.database;

import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.RuntimeExceptionDao;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;
import ${packageName}.model.*;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import java.sql.SQLException;

#set( $providerNameLower = $providerName.toLowerCase() )

public class ${providerName}Database extends OrmLiteSqliteOpenHelper {
    private static final String DATABASE_NAME = "${providerNameLower}_database.db";
    private static final int DATABASE_VERSION = ${databaseVersion};
#foreach( $table in $tables )

    // the DAO object we use to access the ${table.getTableClassName()} table
    private Dao<${table.getTableClassName()}, Integer> m${table.getTableClassName()}Dao = null;
    private RuntimeExceptionDao<${table.getTableClassName()}, Integer> m${table.getTableClassName()}RuntimeDao = null;
#end

    public ${providerName}Database(final Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public final void onCreate(final SQLiteDatabase db, ConnectionSource connectionSource) {

        try {
            Log.d(MoteDatabase.class.getName(),"CREATING DB");
#foreach( $table in $tables )
            TableUtils.createTable(connectionSource, ${table.getTableClassName()}.class);
#end
        } catch (SQLException e) {
            Log.e(MoteDatabase.class.getName(),"Can't create database", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public final void onUpgrade(final SQLiteDatabase db, ConnectionSource connectionSource, final int oldVersion, final int newVersion) {
        upgrade(db, oldVersion, newVersion);
    }

    private final void dropTablesAndCreate(final SQLiteDatabase db) {
        try {
#foreach( $table in $tables )
            TableUtils.dropTable(connectionSource, ${table.getTableClassName()}.class, true);
#end
            // after we drop the old databases, we create the new ones
            onCreate(db, connectionSource);
        } catch (SQLException e) {
            Log.e(MoteDatabase.class.getName(), "Can't drop databases", e);
            throw new RuntimeException(e);
        }
    }

    private void upgrade(final SQLiteDatabase db, final int oldVersion, final int newVersion) {
        dropTablesAndCreate(db);
    }

#foreach( $table in $tables )
    /**
     * Returns the Database Access Object (DAO) for our ${table.getTableClassName()} class. It will create it or just give the cached
     * value.
     */
    public Dao<${table.getTableClassName()}, Integer> get${table.getTableClassName()}Dao() throws SQLException {
        if (m${table.getTableClassName()}Dao == null) {
            m${table.getTableClassName()}Dao = getDao(${table.getTableClassName()}.class);
        }
        return m${table.getTableClassName()}Dao;
    }
    /**
     * Returns the RuntimeExceptionDao (Database Access Object) version of a Dao for our ${table.getTableClassName()} class. It will
     * create it or just give the cached value. RuntimeExceptionDao only through RuntimeExceptions.
     */
    public RuntimeExceptionDao<${table.getTableClassName()}, Integer> get${table.getTableClassName()}DataDao() {
        if (m${table.getTableClassName()}RuntimeDao == null) {
            m${table.getTableClassName()}RuntimeDao = getRuntimeExceptionDao(${table.getTableClassName()}.class);
        }
        return m${table.getTableClassName()}RuntimeDao;
    }
#end
    /**
     * Close the database connections and clear any cached DAOs.
     */
    @Override
    public void close() {
        super.close();
#foreach( $table in $tables )
        m${table.getTableClassName()}Dao = null;
        m${table.getTableClassName()}RuntimeDao = null;
#end
    }
}